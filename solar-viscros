#!/bin/bash
LAT=51.4298255        #your latitude
LON=-97.4662374       #your longitude 
API= #visulacrossing api key
ENABLE=0
P_offset=1  # either 0 no offset or 1 30 minute offset
Wm2=1000  # maxium solar potential
ACO=0.80     # average cloud opacitity 0.6 - 0.9 
MQTT=192.168.168.251
c=0

[ -z "$1" ] && echo "using in script" || P_offset=$1
[ -z "$2" ] && echo "using in script" || Wm2=$2
[ -z "$3" ] && echo "using in script" || ACO=$3


if [ $ENABLE -eq 0 ]
then 
JSON=$( cat /dev/shm/JSON-VC)

else

#JSON=$(lynx -dump "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=1&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=array&key=$API&dataElements=default&locations=$LAT,$LON"  )
JSON=$(lynx -dump "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=1&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=array&key=$API&dataElements=default&locations=dallas%2C%20mb%2C%20canada"  )
echo $JSON | jq > /dev/shm/JSON-VC

fi

echo $JSON | jq  '.locations[].values[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]  | "\(.datetime),\(.cloudcover),\(.visibility)" ' | tr -d '"' > /dev/shm/cloudinessV


PCloud=-1


echo timestamp,potenial,wattage,predicted,C%,W2m,Visiblity > /dev/shm/VisCross.csv 


while IFS=, read -r Time Cloud  Vis CloudH CloudM CloudL
do
 #echo $Time $Cloud $CloudB $CloudC $Vis $SSR
#Time=$(date +%s  -d $Time)
Time=$( echo $Time/1000 |bc ) 
#echo $Time
number=$(date -d @$Time +"%H" )
number=$(echo "$number *2" | bc )
#month=$(date -d @$Time +"%m" )
DAY=$(date -d @$Time +%j )


if [ $PCloud == -1 ]
then
PCloud=$Cloud
PTIME=$Time
PVis=$Vis

numberA=$(echo "$number - $P_offset" | bc -l )
potential=$(./panelconf $numberA)

output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $Time)
OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $Cloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
VisA=$(echo $Vis/25 |bc -l)

 # echo "scale=4;(($output*$TMP) * $Vis)/$Wm2" | bc -l
output=$( echo "scale=4;((($output*$TMP) * $VisA)/$Wm2)" | bc -l)
pot=$(echo $potential* $output | bc )
pot=$(printf "%0.2f\n" $pot)
echo   $numberA,$potential,$pot,$output,$Cloud,$Vis

echo $Time,$potential,$pot,$output,$Cloud,$OUTPUT,$Vis  >> /dev/shm/VisCross.csv
##### mqtt send to database ##################
   mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4P' -m "$Time:$pot"
    mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4' -m "$Time:$OUTPUT"
     mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_C4' -m "$Time:$Cloud"
   c=$(echo $c+1 |bc) 
      
 else
 
  ########### extroplate ###############
 PTIME=$(echo $PTIME + 1800 | bc)
 PCloud=$(echo "($Cloud + $PCloud)/2" |bc)
 PVis=$(echo "($Vis + $PVis)/2" |bc)
 output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $PTIME)
 OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $PCloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
PVisA=$(echo $PVis/25 |bc -l)
numberC=$(echo "$number - ($P_offset*2) " | bc -l )
potential=$(./panelconf $numberC)
#echo  $numberC  $potential   ---------C

#echo "scale=4;(($output*$TMP) * $PVis)/$Wm2" | bc -l
output=$( echo "scale=4;((($output*$TMP) * $PVisA)/$Wm2)" | bc -l)
pot=$(echo $potential* $output | bc )
pot=$(printf "%0.2f\n" $pot)

echo   $numberC,$potential,$pot,$output,$Cloud,$PVis
echo $PTIME,$potential,$pot,$output,$Cloud,$OUTPUT,$PVis  >> /dev/shm/VisCross.csv


########### end of day ###########

 
if [ $c -eq 47 ]
then 

cat /dev/shm/VisCross.csv > /dev/shm/VisCross_EOD.csv 
fi 

###################################



##### mqtt send to database ##################
    mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4P' -m "$PTIME:$pot"
     mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4' -m "$PTIME:$OUTPUT"
      mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_C4' -m "$PTIME:$PCloud"
      
      c=$(echo $c+1 |bc)
 
output=$(python3 -W ignore radiation.py -lon $LON -lat $LAT -t $Time)
OUTPUT=$(printf "%0.2f\n" $output)
Opac=$(echo $Cloud*$ACO |bc -l)
TMP=$(echo 100-$Opac |bc -l)
TMP=$(echo $TMP/100 |bc -l)
VisB=$(echo $Vis/25 |bc -l)

numberB=$(echo "$number - $P_offset" | bc -l )
potential=$(./panelconf $numberB)

output=$( echo "scale=4;((($output*$TMP) * $VisB)/$Wm2)" | bc -l )
pot=$(echo $potential* $output | bc -l)
pot=$(printf "%0.2f\n" $pot)

echo   $numberB,$potential,$pot,$output,$Cloud,$Vis

echo $Time,$potential,$pot,$output,$Cloud,$OUTPUT,$Vis >> /dev/shm/VisCross.csv

##### mqtt send to database ##################
   mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4P' -m "$Time:$pot"
    mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_W4' -m "$Time:$OUTPUT"
     mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_C4' -m "$Time:$Cloud"

   
   c=$(echo $c+1 |bc)
 

PCloud=$Cloud
PTIME=$Time
PVis=$Vis 
 ############# end of extropation ############### 
   
   
 fi
done < /dev/shm/cloudinessV



awk '{if (NR!=1) {print}}' /dev/shm/VisCross_EOD.csv | awk -F "," ' $4 != "0" {print $2, $3, $4, $6}' |awk  '$4!="" {print}' | tr " "  "," > /dev/shm/AVG_VIS
cnt=0
avgPo=0
avgPob=0
avgPos=0
avgMea=0

while IFS=, read -r Po  Mea Pob Pos
do

if [ -z "$Po" ]; then Po=0;  fi
if [ -z "$Mea" ]; then Mea=0;  fi
if [ -z "$Pob" ]; then Pob=0;  fi
if [ -z "$Pos" ]; then Pos=0;  fi

 
avgPo=$( echo "scale=2;($avgPo + ($Po*($Pos/$Wm2)))" | bc -l)

avgMea=$( echo "scale=2;($avgMea + $Mea)" | bc -l)

avgPob=$( echo "scale=4;($avgPob + $Pob)" | bc -l)

avgPos=$( echo "scale=2;($avgPos + $Pos)" | bc -l)

cnt=$(echo $cnt+1 |bc)


done < /dev/shm/AVG_VIS


avgPos=$( echo "scale=2;(($avgPos/$cnt)/$Wm2) " | bc -l)
avgPob=$( echo "scale=4;(($avgPob/$avgPos) / $cnt)" | bc -l)



avgPo=$( echo "scale=2;(($avgPo / 2))" | bc -l)

avgMea=$( echo "scale=2;($avgMea / 2)" | bc -l)

avgPos=$( echo "scale=2;($avgPo * $avgPob)" | bc -l)

AVG=$( echo "scale=2;($avgMea /$avgPo)" | bc -l)

cnt=$(echo "scale=2;($cnt/2)" |bc -l )

echo Clear Sky Max = $avgPo  > /dev/shm/AVG_VIS
echo Daily Estimate = $avgPos  >> /dev/shm/AVG_VIS
echo Daily Measured = $avgMea  >> /dev/shm/AVG_VIS
echo EST.% of norm  = $avgPob >> /dev/shm/AVG_VIS
echo ACT. % of norm = $AVG >> /dev/shm/AVG_VIS
echo Rounded HRs    = $cnt >> /dev/shm/AVG_VIS

##### mqtt send to database ##################
   mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_CL_V' -m "N:$avgPo"
    mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_E_V' -m "N:$avgPos"
     mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_P_V' -m "N:$avgPob"
      mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_M_V' -m "N:$avgMea"
       mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_A_V' -m "N:$AVG"
         mosquitto_pub -h $MQTT -t 'incoming/test/mqtt-Energy/power-predict_A_H_V' -m "N:$cnt"


